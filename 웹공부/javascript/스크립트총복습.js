// 1. 자바스크립트 브라우저의 역사
// 30년 전에 마크엔더슨이 넷스케이프 커뮤니케이션즈 창립.
// 브랜든 에이크 영입 라이브스크립트 개발(프로토타입)
// 인기에 편승하기 위해서 자바스크립트로 이름을 바꿈.
// MS의 익스플로러가 점유율을 이용해서 표준을 안지키다가, 구글의 크롭이 나왔을때부터 다시 표준화 진행. ECMA협회에서 표준화 진행, ES5,ES6//EcmaScript의 버전을 말하는 것

// 2. 자바스크립트가 보통의 언어와 다른점
// 호이스팅 : js인터프리터가 '선언'을 스코프의 제일 위로 끌어올리는 행위
// 다이나믹 타입드 : 선언, 정의때 데이터타입이 결정되는 것이 아니라, 값이 할당될때 타입이 결정.
// 일급객체 : first class object - js에서는 함수가 일급객체이기 때문에 변수에 할당, 다른함수의 리턴, 파라미터로 전달
//                                함수를 변수처럼 사용 가능

// 3. html을 통한 js 사용, 브라우저에서 바로 js사용, 브라우저 없이 js 사용
// - 외부파일 : <script src = '외부js 파일경로'>
// - html 직접 사용 : <script>js소스</script>
// - 브라우저에서 바로 : console탭 열어 js소스
// - 브라우저 없이 : nodejs 환경

// 4. 데이터타입
// - 원시형 : string,number,boolean, null,undefined
//   값에 의한 참조 : let a=5; b=a; b=70; a는 여전히 5
// - 객체형 : 원시형 타입말고 모든 타입
//   주소에 의한 참조 let x =[1,2,3]; let y=x; y[2] = 100하면 x가 [1,2,100]이 됨

// 5. 연산자
// - 산술 : + - * / % **
// - 증감 : ++, -- 변수 앞에 쓰이면 증감 후 사용, 뒤에 쓰이면 사용후 증감
// - 할당 : = , 산술과 합쳐진 = (+=, -= 등)
// - 비교 : ==(값), ===(값과 타입), !=(값이 다름), !==(값과 타입이 다름) <, <=, >, >=
// - 논리 : &&(and), ||(or), !(not)
// - 비트 : &, | ^(xor), ~(not), <<(오른쪽쉬프트), >>(왼쪽쉬프트) bit =0과1 = 알고리즘 사용 시 효율적으로 하기위해 사용

// - 변수
// - what : 변하는 값을 담을 그릇
// - why : 이값이 무엇을 의미하는지 이름, 값을 반복해서 여기저기서 쓸때 하나의 그릇으로 참조
// - how : 
// - var :variable 의 약자. 
// 옛날에 변수선언 키워드, 일반적인 프로그래밍 상식에 어긋나는 일이 많이 일어나기 때문에 최대한 안쓰는 것이 좋음.
// 재선언 가능, 호이스팅의 유효범위가 일반 블럭이 아니라 함수에만 적용
// - let : let의 약자. 
// - const : constant 의 약자. 상수. 한번초기화 되면 값을 변경할 수 없음
// - 유효범위(스코프) : 함수나, 변수나, 객체등이 선언된 시점으로 부터 살아있을 수 있는 범위(접근할 수 있는 범위)
//                     부모 (바깥영역)에 선언된 변수는 자식(안쪽영역) 에서 접근 가능
//                     일반적으로 {}안에 있으면 지역변수로 취급됨

// - 조건문
// - 삼항 : 조건? 참일때실행:거짓일때실행문;
// - if : 일반적일때 중첩구조
//        if(조건){본문} 필요한 경우 else if, else 사용
// - switch : 딱 떨어지는 조건에 쓰면 좋음
//            switch(조건){
//                  case 만족 값:
//                          내용
//                        break;   
//                  case 만족 값:
//                          내용
//                        break;     
//                          }

// - 반복문
// for : 횟수를 기반으로 반복할때 좋음
//       for(초기화; 조건; 스탭){본문};
// while 조건 기반으로 반복할때 좋다.
//          while(조건){본문};
// do-while 조건인데 최초의 한번은 조건검사없이 무조건 실행함
//              do{본문} while(조건);

// 배열
// - what : 같은 성격의 데이터들이 순서대로 늘어선 묶음
// - why : 여러개의 변수로 쓰면 관리가 어려워 묶어서 하나로 관리
// 예) let stu1 = '홍길동' let stu2 = '김철수
//     let class = ['홍길동' , '김철수']
// - how : let 배열명 = [원소1, 원소2, 원소3 ...]
//         let 배열명 = new Array(원소들);
//         호출 : 배열명[인덱스] // 인덱스는 0부터 시작
// CRUD(Create, Readm Update, Delete), 내장함수, 향상된 for 문
// 내장함수 : indexOf(값); 일치하는 값의 처음 인덱스
//           includes(값); 값이 있으면 true 없으면 false
//           push(요소); 맨뒤에 요소 추가
//           pop(); 맨뒤에 요소 제거하고 리턴
//           splice(시작인덱스,지울갯수); 시작부터 지울갯수까지 지움
//           join(); 배열의 요소를 모두 합치면서 중간에 사잇글자를 넣은 하나의 스트링으로 반환
//           sort(); 문자열 순서대로 정렬, 문자열 순서가 아니라 별도의 기준을 정해주고 싶으면  콜백함수 전달
//           reverse(); // 역순으로 정렬

// 향상된 for문
// 기본for for(let i=0;i<배열.length; i++){배열[i]접근};
// in : for(let 변수명 in 배열) 모든 키(인덱스) 반환
// of : for(let 변수명 of 배열) 모든 값 리턴

// 함수
// - what : 인풋을 받아 특정한 로직을 실행 후 아웃풋을 반환하는 코드의 묶음
// - why : 반복되는 코드를 하나의 호출로 쓰기위해, 이코드가 의미하는 것이 뭔지 이름
// - how : 
// - 선언식 : function 함수명(파라미터){본문; return 반환값;}
// - 표현식 : let 변수명 = function(파라미터){본문; return 반환값;}
//            함수를 변수에 할당할 수 있는 것은 자바스크립트에서 함수가 일급객체이기때문에 가능
//            함수의 이름을 전달한 것과 함수를 호출한 것을 구분할 수 있어야함.
//            호출은 괄호 열고 닫고가 있다
// - 파라미터, 아규먼트 : 파라미터는 정의할때 인풋, 아규먼트는 호출할때 인풋
//                       파라미터가 없는 함수도 있을수 있다
// - 리턴 : 함수는 return 키워드를 만나면 뒤를 실행안하고 즉시 종료, return 뒤에 오는 값을 함수를 호출한 곳에 반환
//          return 문이 없는 함수도 있을 수 있다
// - 객체
// - what : Object 프로그램잉으로 구현해야 할 대상. 속성(변수)과 행동 기능 (함수)의 묶음
// - why : 인간이 생각하는 방법대로 특정 개념이 가지고 있는 속성과 행위를 하나의 변수로 묶어서 관리하면
//          개발, 이해, 유지보수에 좋음
// - how : let 객체명 = {키:값; 키2:값2; 기능명 : function(인풋){본문}};
//       사용하는 법 - 객체명.속성; 객체명[속성]; 객체명.함수();
// 생성자 함수
// - what : 객체를 생성하는 함수
// - why : 위의 객체 방법으로 인스턴스를 생성하게 되면 인스턴스를 만들때마다 같은 코드가 반복되
//         설계도 하나를 만들어 놓고 값만 바꿔가며 찍어냄
// - how : function 생성자함수명(객체가 만들어질떄 필요한 변수들){
//     this.속성명 = 값;
//     this.속성명2 = 값2;
//     this.기능명 = function(인풋){
//         본문;
//     }
// }
// 찍어내는 법 let 인스턴스 명 = new 생성자함수명(전달할 변수들);
// - 리턴

//DOM
// - what : Document Object Model
//          HTML, XML의 모든 구성요소를 계층화된 노드형태로 만들어야 한다는 표준
// - why : JS를 통해 HTML이나 XML의 요소를 컨트롤 할 수 있게하기 위해
//         각 브라우저마다 통일된 API를 제공하기 위해 표준
//         DOM 표준을 구현하는 것은 브라우저 제조사들의 개발 우선순위 1순위
// - how : DOM을 만드는 것은 우리가 하는게 아니고 국제협약 개발자들은 사용을 하는 것
//         DOM 표준을 활용해서 동적으로 HTML요소나 속성을 추가할 수 있음
// - HTML 요소선택
// 1. HTML 그 자체로 자바스크립트 변수로 가져오기
// - let 변수 = document.getElementById('아이디명'); id로 가져오기
// - let 변수 = document.getElementByClassName('클래스명'); 클래스로 가지고 오기 배열이 리턴
// - let 변수 = document.getElementByTagName('태그명'); 태그로가져오기, 배열이 리턴
// - let 변수 = document.getElementByName('네임명'); name으로 가져오기, 배열이 리턴
// html복습. id = 해당문서에서 유일하게 식별하기 위한 이름
//           class = 해당문서에서 공통요소를 묶어서 식별하기 위한 이름
//           name = 백엔드로 데이터를 전달할때 백엔드에서 인지할 이름
// 2. CSS선택자로 가져오기
// - document.qureySelector('CSS선택자'); 선택된것 중 첫번째 하나
// - document.qureySelectorAll('CSS선택자'); 선택된 리스트
// CSS선택자 복습.  태그는 그냥, 아이디는 #, 클래스는 . , 자손 띄어쓰기, 자식은 >
//                 여러개는, 
//              예)p태그 안에 있는 img태그중 클래스가 big인것을 선택하려면
//                  p img .big

// 이벤트
// - what 
// - 어떤 사건. 사건이 언제 발생할지 모르기떄문에 '어떤요소에 어떤사건이 일어나면 어떤일을 해라'라고 미리 코딩해야함
//   이벤트 감지(이벤트 리스너), 감지시 실행할 함수(이벤트 핸들러)
// - 이벤트의 종류 
// - 마우스 : 클릭click, 더블클릭dblclick, 위로 올라옴mouseover, 떠남mouseleave, 누름mousedown, 뗌mouseup 등
// - 키보드 : 안보이는 키가 눌러짐keypress, 모든키 눌러짐keydown, 눌러진 키가 올라옴 keyup 
// - 윈도우 : load  html의 로딩이 끝남을 알림, scroll 키보드, 마우스, 터치가 스크롤됨, error 창을 띄울때 에러
// - 인풋 : change (값이 기존 값에서 변경), focusin(커서를 이 요소안에서 클릭해서 포커싱이 들어왔다) 
//          blur (포커싱에서 벗어남) select(요소선택)
// - why : 웹을 동적으로 활용, 사용자의 행동에 반응하는 웹, 
//         개발자가 순서대로 실행시키는 것이 아니라 비동기적으로 특정 조건이 만족되었을때 실행
// - how : 요소를 가져와서 어떤 이벤트를 먹일지 선택, 발생되었을때 실행할 코드 전달
//         html에서 직접하는 법
//          <input on이벤트타입='함수명();'>
//          <input on이벤트타입= 실행할 문장;>
//          자바스크립트를 통해 html 속성 을 건드리는 법
//          객체.onclick = function(){};
//          자바스크립트를 통해 이벤트리스너를 추가하는 법
//          객체.addEventListener('이벤트타입', function(event){});

